//Return Geometry Object
//
//Sample Inputs:
// var line = "LINESTRING(-13168634.8981 4026429.6236,-13168632.6717 4026903.5277,-13168633.785 4027126.3901,-13168632.6717 4027342.5441,-13168633.785 4027527.8222,-13168633.785 4027768.1511,-13168633.785 4028013.8557,-13168637.1245 4028503.9382,-13168637.1245 4028748.316,-13168637.1245 4028759.0581,-13168629.3322 4028759.0581,-13168593.7099 4028806.0544,-13168593.7099 4028818.1392,-13168629.3322 4028874.5352,-13168629.3322 4028886.62,-13168638.2378 4028886.62,-13168638.2378 4029159.2047,-13168637.1245 4029540.5656,-13168640.4642 4029901.796,-13168640.4642 4030424.1904,-13168639.3509 4030872.7434,-13168639.3509 4030876.7723,-13168634.8981 4030883.4874,-13168633.785 4030947.9516,-13168633.785 4031067.4799,-13168631.5586 4031239.3882)";
// var polygon = "POLYGON((-118.254840771884 34.1287314870685,-118.254983539259 34.1248053761672,-118.255112029896 34.1239202157454,-118.255397566445 34.1233348686093,-118.255697377932 34.1228780121106,-118.25783889305 34.120822158316,-118.258110151063 34.1206365598295,-118.261093994592 34.1178240371497,-118.264349097933 34.1149829609949,-118.265020106393 34.114411889697,-118.26593381939 34.1133268558498,-118.266033755653 34.1130698736758,-118.265733944166 34.1124559730648,-118.265077213343 34.111185340731,-118.263421108198 34.1071878470416,-118.262707270424 34.1068166509677,-118.260922673742 34.1060457053451,-118.25908097101 34.1044895382616,-118.259192806203 34.1043765132655,-118.259198754319 34.1008430139939,-118.259240394728 34.0978210976656,-118.259258240875 34.0941686261812,-118.258451366437 34.0913749011308,-118.258549519345 34.0910120327791,-118.258921308971 34.0903576806625,-118.259284177323 34.0894624091629,-118.259801947602 34.086912458843,-118.260099380382 34.0829566046637,-118.26042655644 34.078108453942,-118.264798815613 34.0773648719913,-118.265661370676 34.0775433316595,-118.266256236236 34.0781679395988,-118.269825426902 34.0800120219373,-118.27107464368 34.0813207261706,-118.272770009628 34.0825104563925,-118.273721795424 34.0832540383432,-118.27455460631 34.0848006879015,-118.277261242812 34.0903626781951,-118.278926866382 34.0909575428564,-118.280414029384 34.0925636789706,-118.281098123879 34.0925041933139,-118.281603758706 34.0923554760245,-118.283447841944 34.0911657458026,-118.284537456938 34.0909144572365,-118.309146019773 34.0907493399101,-118.309151968788 34.0940508419728,-118.309151968788 34.1077922301274,-118.296302879874 34.1102311771272,-118.280182031276 34.1132649896876,-118.277683596821 34.1135029359118,-118.272091864148 34.1161203425798,-118.2716159717 34.116953155264,-118.271675458256 34.1195110753759,-118.270902133027 34.1208197787099,-118.269058050688 34.1231992400529,-118.262276586895 34.1266494576064,-118.258469450005 34.1287314870685,-118.254840771884 34.1287314870685))"
// var multiline = "MULTILINESTRING((-13185656.5716 4049076.7994,-13185656.5716 4058618.984,-13185656.5716 4059099.5075,-13185815.5 4059395.8404,-13185822.1219 4061734.7399,-13185801.98 4061820.6889,-13185755.6259 4061884.7757,-13184537.1761 4062954.2762,-13182688.9722 4064589.5629),(-13187598.7453 4049480.9521,-13187602.2771 4057916.8155,-13187612.8723 4058096.1975,-13187644.6579 4058224.3292,-13187708.2292 4058314.0222,-13187750.61 4058429.3429,-13187771.8005 4058570.292,-13187729.4196 4064504.557),(-13195375.8807 4051484.2597,-13195366.345 4051532.2808,-13195375.5628 4055849.6434,-13195390.9259 4065748.8397),(-13178832.8767 4060177.0868,-13180760.9245 4062383.1101,-13182688.9722 4064589.5629),(-13182688.9722 4064589.5629,-13183430.5967 4065438.3906),(-13182688.9722 4064589.5629,-13181530.7838 4065614.4458))"
// var point = "POINT(-118.496712171729 34.319990978401)"
// var multipolygon = "MULTIPOLYGON(((-118.286852439 34.0785271650001,-118.286691985178 34.0785241650461,-118.286531821102 34.0785140706187,-118.2863722603 34.0784969014785,-118.286213615122 34.0784726912347,-118.28605619612 34.0784414872799,-118.285900311452 34.0784033506977,-118.285746266268 34.0783583561418,-118.28559436212 34.0783065916913,-118.285444896365 34.0782481586777,-118.285298161592 34.0781831714863,-118.28515444504 34.0781117573326,-118.285014028041 34.0780340560129,-118.284877185468 34.0779502196315,-118.284744185196 34.0778604123019,-118.28461528758 34.0777648098263,-118.284490744943 34.0776635993509,-118.284370801084 34.0775569789998,-118.284255690797 34.0774451574877,-118.284145639417 34.0773283537104,-118.284040862374 34.0772067963164,-118.283941564774 34.0770807232606,-118.283847940997 34.0769503813365,-118.283760174317 34.0768160256945,-118.28367843654 34.0766779193424,-118.283602887672 34.0765363326295,-118.283533675603 34.0763915427188,-118.283470935819 34.0762438330432,-118.283414791137 34.0760934927513,-118.283365351462 34.0759408161413,-118.283322713575 34.0757861020848,-118.283286960941 34.0756296534418,-118.283258163547 34.0754717764681,-118.283236377767 34.0753127802149,-118.283221646247 34.0751529759252,-118.283213997824 34.0749926764231,-118.28321344747 34.0748321955027,-118.283219996263 34.0746718473128,-118.283233631384 34.0745119457424,-118.283254326141 34.0743528038065,-118.283282040022 34.0741947330328,-118.283316718777 34.0740380428524,-118.283358294521 34.0738830399935,-118.283406685867 34.0737300278817,-118.283461798086 34.073579306045,-118.283523523294 34.0734311695288,-118.283591740661 34.0732859083174,-118.283666316648 34.0731438067663,-118.28374710527 34.0730051430457,-118.283833948378 34.0728701885967,-118.283926675973 34.0727392075989,-118.284025106537 34.0726124564537,-118.284129047387 34.0724901832824,-118.284238295054 34.0723726274404,-118.28435263568 34.0722600190489,-118.284471845439 34.0721525785441,-118.284595690972 34.072050516246,-118.284723929845 34.0719540319459,-118.284856311025 34.0718633145166,-118.284992575369 34.071778541542,-118.285132456134 34.0716998789687,-118.285275679495 34.0716274807828,-118.285421965088 34.0715614887068,-118.285571026551 34.0715020319233,-118.285722572088 34.0714492268222,-118.285876305044 34.0714031767713,-118.286031924477 34.0713639719163,-118.286189125756 34.0713316890024,-118.286347601152 34.0713063912246,-118.286507040442 34.0712881281049,-118.286667131516 34.0712769353941,-118.286827560988 34.0712728350023,-118.28698801481 34.0712758349563,-118.287148178886 34.0712859293837,-118.287307739688 34.0713030985239,-118.287466384867 34.0713273087677,-118.287623803868 34.0713585127223,-118.287779688536 34.0713966493047,-118.28793373372 34.0714416438605,-118.288085637869 34.071493408311,-118.288235103623 34.0715518413245,-118.288381838396 34.0716168285159,-118.288525554948 34.0716882426698,-118.288665971947 34.0717659439893,-118.28880281452 34.0718497803709,-118.288935814792 34.0719395877005,-118.289064712408 34.0720351901761,-118.289189255045 34.0721364006515,-118.289309198904 34.0722430210024,-118.289424309191 34.0723548425146,-118.289534360571 34.0724716462919,-118.289639137614 34.0725932036858,-118.289738435214 34.0727192767418,-118.289832058991 34.0728496186659,-118.289919825671 34.0729839743079,-118.290001563448 34.07312208066,-118.290077112316 34.0732636673727,-118.290146324385 34.0734084572834,-118.290209064169 34.0735561669592,-118.290265208851 34.0737065072511,-118.290314648526 34.0738591838611,-118.290357286413 34.0740138979176,-118.290393039047 34.0741703465604,-118.290421836441 34.0743282235343,-118.290443622221 34.0744872197874,-118.290458353741 34.0746470240771,-118.290466002164 34.0748073235791,-118.290466552518 34.0749678044996,-118.290460003725 34.0751281526896,-118.290446368604 34.0752880542599,-118.290425673847 34.0754471961959,-118.290397959966 34.0756052669696,-118.290363281211 34.0757619571501,-118.290321705467 34.075916960009,-118.290273314121 34.0760699721208,-118.290218201902 34.0762206939573,-118.290156476694 34.0763688304734,-118.290088259327 34.0765140916848,-118.29001368334 34.0766561932359,-118.289932894719 34.0767948569566,-118.289846051611 34.0769298114055,-118.289753324015 34.0770607924032,-118.289654893451 34.0771875435487,-118.289550952601 34.07730981672,-118.289441704935 34.0774273725618,-118.289327364308 34.0775399809534,-118.289208154549 34.0776474214581,-118.289084309016 34.0777494837565,-118.288956070143 34.0778459680565,-118.288823688963 34.0779366854856,-118.288687424619 34.0780214584604,-118.288547543855 34.0781001210335,-118.288404320493 34.0781725192197,-118.2882580349 34.0782385112956,-118.288108973437 34.078297968079,-118.2879574279 34.0783507731802,-118.287803694945 34.0783968232309,-118.287648075511 34.0784360280861,-118.287490874232 34.0784683110001,-118.287332398836 34.0784936087776,-118.287172959546 34.0785118718973,-118.287012868472 34.0785230646083,-118.286852439 34.0785271650001)))"

//Sample Output
// {
// 	type: "LINESTRING",
// 	coordinates: [
// 		[x1, y1],
// 		[x2, x2],
// 		[xN, yN]
// 	]
// }

var proj4 = require('proj4'); //Library to convert between coordinates systems; TODO: Manually toggle in function createCoordArray

function parseMultiPolygon (strMPL) { //Flawed: Doesn't parse true Multipolygons
	var finalArray = [];
	var tempArr = [];
	var beginPos = strMPL.indexOf('(');

	while (strMPL.charAt(beginPos) === "(") {
		beginPos++;
	}

	var endPos = strMPL.length -1;

	while (strMPL.charAt(endPos) === ")") {
		endPos--;
	}

	var tempStr = strMPL.substring(beginPos -1, endPos +2);
	tempArr = createCoordArray(tempStr);
	return tempArr.reverse(); //Leaflet expects Multipolygons to follow the right-hand rule
}

function parseMultiLine (strML) {
	var finalArray = [];
	var tempArr = [];
	var beginPos = strML.indexOf('(');

	while (strML.charAt(beginPos) === "(") {
		beginPos++;
	}

	var endPos = strML.length -1;

	while (strML.charAt(endPos) === ")") {
		endPos--;
	}

	var tempStr = strML.substring(beginPos -1, endPos +2);

	while (tempStr.length > 0) {
		var begin = tempStr.indexOf('(');
		var end = tempStr.indexOf(')');
		var newEntry = tempStr.substring(begin, end+1);
		if (newEntry.length > 0) {tempArr.push(newEntry)} else {break}
		tempStr = tempStr.substring(end+2, tempStr.length-1);
	}

	tempArr.forEach(function(el) {
		finalArray.push(createCoordArray(el));
	});

	return finalArray;

}

function createCoordArray(parseDb) {
	var beginPos = parseDb.indexOf('(');

	while (parseDb.charAt(beginPos) === "(") {
		beginPos++;
	}

	var strCoordinates = parseDb
					.substring(beginPos, parseDb.indexOf(')'))
					.split(',');

	var finalArray = [];

	for (var i = 0; i < strCoordinates.length; i++) {
		var tempArr = [];
		strCoordinates[i].split(" ").forEach(function(el) {
			tempArr.push(parseFloat(el));
		});
		//Note: if coordinates need conversion: uncomment the line below, and comment out the next line.
		// finalArray.push(proj4('EPSG:3857','EPSG:4326', tempArr));
		finalArray.push(tempArr);
	}

	return finalArray;
}

function parseGeometry(dbOutput){
	var objGeometry = {};

	objGeometry.type = dbOutput.substring(0, dbOutput.indexOf('('));

	//Begin transformation of specific features
	switch(objGeometry.type){
		case("LINESTRING"):
			objGeometry.type = "LineString";
			objGeometry.coordinates = createCoordArray(dbOutput);
			break;

		case("MULTILINESTRING"):
			objGeometry.type = "MultiLineString";
			// objGeometry.coordinates = parseMultiLine(dbOutput);
			try {
				objGeometry.coordinates = parseMultiLine(dbOutput);
			}
			catch(err) {
				console.log(err);
			}
			break;

		case("POLYGON"): 
			objGeometry.type = "Polygon";
			objGeometry.coordinates = [];
			objGeometry.coordinates.push(createCoordArray(dbOutput).reverse());
			break;

		case("MULTIPOLYGON"):
			objGeometry.type = "MultiPolygon";
			objGeometry.coordinates = [[]];
			objGeometry.coordinates[0].push(parseMultiPolygon(dbOutput));
			break;

		case("POINT"):
			objGeometry.type = "Point";
			var tempStr = dbOutput.substring(dbOutput.indexOf("(")+1, dbOutput.indexOf(")"));
			var tempArr = (tempStr).split(" ")
								   .map(function(el){
								   		return parseFloat(el)
								   	});
			// objGeometry.coordinates = proj4('EPSG:3857','EPSG:4326',tempArr); //TOGGLE HERE IF NEEDED
			objGeometry.coordinates = tempArr; //Comment out this line if converting coordinate systems
			break;

		case("MULTIPOINT"): 
			objGeometry.type = "MultiPoint";
			objGeometry.coordinates = createCoordArray(dbOutput);
			break;
	}

	return objGeometry;
}

module.exports = parseGeometry;
// console.log(JSON.stringify(parseGeometry(multiline)));
// parseMultiPolygon(multipolygon);